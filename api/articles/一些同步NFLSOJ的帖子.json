{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"一些同步NFLSOJ的帖子","date":"2024-07-30T12:03:31.293Z","updated":"2024-07-30T08:38:30.007Z","comments":true,"path":"api/articles/一些同步NFLSOJ的帖子.json","keywords":null,"cover":null,"content":"<h1 id=\"一些同步NFLSOJ的帖子\"><a href=\"#一些同步NFLSOJ的帖子\" class=\"headerlink\" title=\"一些同步NFLSOJ的帖子\"></a>一些同步NFLSOJ的帖子</h1><hr>\n<p><del>由于mzy没什么好的内容，</del>，最近我会同步NFLSOJ的讨论板块。</p>\n<p>不过，一些未标注原题的题解和过时信息会被跳过。</p>\n<hr>\n<h3 id=\"造福后人：树形背包-dp-的错误写法\"><a href=\"#造福后人：树形背包-dp-的错误写法\" class=\"headerlink\" title=\"造福后人：树形背包 dp 的错误写法\"></a>造福后人：树形背包 dp 的错误写法</h3><p>原文链接：<a href=\"http://192.168.188.77/article/2150\">http://192.168.188.77/article/2150</a></p>\n<p>作者：<a href=\"http://192.168.188.77/user/892\">XiaoZecheng</a></p>\n<p>这是一段树形dp的<strong>错误代码</strong>。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">drep</span>(i, k, <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"built_in\">drep</span>(j, i, <span class=\"number\">0</span>)</span><br><span class=\"line\">      dp[u][i] = <span class=\"built_in\">max</span>(dp[u][i], dp[u][i-j] + dp[v][j]);</span><br></pre></td></tr></table></figure>\n\n<p>看起来正确无比，是吗？事实上，这份代码的错误非常难调（我写了两道题都是调死在这里）。</p>\n<p>当j&#x3D;0时，转移方程变为**dp[u][i] &#x3D; max(dp[u][i], dp[u][i] + dp[v][0]);**。当dp(v,0)≠0时，这个等于说更新了dp(u,i)两边，不满足吩咐背包的特征。</p>\n<p>因此，我们一定得这么写：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">drep</span>(i, k, <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> val = dp[u][i];</span><br><span class=\"line\">  <span class=\"built_in\">drep</span>(j, i, <span class=\"number\">0</span>)</span><br><span class=\"line\">    val = <span class=\"built_in\">max</span>(val, dp[u][i-j] + dp[v][j]);</span><br><span class=\"line\">  dp[u][i] = val;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以后做题的时候如果实在不知道怎么处理，不如用个 <code>tmp</code> 数组先转存一下，就没有这个问题。</p>\n<hr>\n<h3 id=\"推荐一个做题的好方法哦\"><a href=\"#推荐一个做题的好方法哦\" class=\"headerlink\" title=\"推荐一个做题的好方法哦\"></a>推荐一个做题的好方法哦</h3><p>原文链接：<a href=\"http://192.168.188.77/article/4267\">http://192.168.188.77/article/4267</a></p>\n<p>作者：<a href=\"http://192.168.188.77/user/5359\">wangyize</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">要做题了，你会不会感到不安？脑袋里一片空白？那可能是因为你的方法不对，今天让我来推荐一个做题的好方法吧。</span><br><span class=\"line\">                                      ^^^^</span><br><span class=\"line\">第一步，把题目认真地读3遍（第一遍看全部题目，第二遍重点看问题与条件，第三遍重点看输入输出格式与数据范围和样例）</span><br><span class=\"line\"></span><br><span class=\"line\">第二步，思考问题，将刚刚看的问题进行思考。</span><br><span class=\"line\"></span><br><span class=\"line\">第三步，根据条件来再次思考问题。</span><br><span class=\"line\"></span><br><span class=\"line\">第四步，找特例，根据自己的思路、输入输出格式与数据范围和样例进行找特例，优化等操作。</span><br><span class=\"line\"></span><br><span class=\"line\">第五步，开始写代码吧！(*^▽^*)</span><br></pre></td></tr></table></figure>\n\n<p>(mzy：不知道这篇文章怎么过审の)</p>\n<hr>\n<h3 id=\"警示后人\"><a href=\"#警示后人\" class=\"headerlink\" title=\"警示后人\"></a>警示后人</h3><p>原文链接：<a href=\"http://192.168.188.77/article/2117\">http://192.168.188.77/article/2117</a></p>\n<p>作者：<a href=\"http://192.168.188.77/user/892\">XiaoZecheng</a></p>\n<ol>\n<li>HDU 会把 RE 报成 WA。</li>\n<li>这道题“该策略至少已经启用过一次”代表的是从开始以来，<strong>而不是从上次启动以来</strong>，所以不判一下会 RE！</li>\n<li><code>set</code> 等容器在删除 <code>end()</code> 的时候会炸。</li>\n</ol>\n<hr>\n<h3 id=\"数组式前向星（区间建图）——关于邻接表\"><a href=\"#数组式前向星（区间建图）——关于邻接表\" class=\"headerlink\" title=\"数组式前向星（区间建图）——关于邻接表\"></a>数组式前向星（区间建图）——关于邻接表</h3><p>原文链接：<a href=\"http://192.168.188.77/article/1764\">http://192.168.188.77/article/1764</a></p>\n<p>作者：<a href=\"http://192.168.188.77/user/483\">20200836</a></p>\n<h1 id=\"高呼：-斯巴克瑟文大帝万岁\"><a href=\"#高呼：-斯巴克瑟文大帝万岁\" class=\"headerlink\" title=\"高呼： 斯巴克瑟文大帝万岁\"></a>高呼： 斯巴克瑟文大帝万岁</h1><p><del>众所周知，</del>链式前向星的建图比<code>vector</code>快，但是访问比<code>vector</code>慢（并且有些人厌恶<code>vector</code>，比如笔者）。这是因为<code>vector</code>内部地址是连续的，从而可以加速（具体原理不明）。为了防止被卡常，可以采用<a href=\"http://192.168.188.77/user/295\">斯巴克瑟文大帝</a>发明的数组式前向星。</p>\n<p>数组式前向星有线性的构造方法：先构造链式前向星，然后再根据链式前向星构造数组式前向星，代码如下（以无向图为例，感谢<a href=\"http://192.168.188.77/user/315\">b6e0</a>）：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> m, n, u[nMax], v[nMax], g[mMax2], r[nMax];</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;u[i], &amp;v[i]);</span><br><span class=\"line\">  r[u[i]]++;</span><br><span class=\"line\">  r[v[i]]++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>, j = <span class=\"number\">0</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">  j += r[i];</span><br><span class=\"line\">  r[i] = j - r[i];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++) &#123;</span><br><span class=\"line\">  g[r[u[i]]++] = v[i];</span><br><span class=\"line\">  g[r[v[i]]++] = u[i];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用时：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = r[u - <span class=\"number\">1</span>]; i &lt; r[u]; i++) &#123; <span class=\"comment\">// 访问u的邻居</span></span><br><span class=\"line\">  <span class=\"comment\">// v[i]是u的邻居</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>相当于链式前向星的</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = h[u]; i; i = nxt[i]) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// to[i]是u的邻居</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最后是干货部分，数据来源于我的老爷机，n&#x3D;m&#x3D;1e6，(u,v,w)表示十次测试内，最快为u，平均为v，最慢为w，时间单位为ms（访问指访问每个点的邻居各一次）：</p>\n<table>\n<thead>\n<tr>\n<th>测试项目</th>\n<th>链式前向星</th>\n<th>vector</th>\n<th>数组式前向星</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>建图时长</td>\n<td>（12，13.4，16）</td>\n<td>(145,148.9,155)</td>\n<td>(26,27.3,31)</td>\n</tr>\n<tr>\n<td>访问时长</td>\n<td>（170，175.8，184）</td>\n<td>(31,32.3,33)</td>\n<td>(6,6.7,8)</td>\n</tr>\n<tr>\n<td>建图时长（-O2）</td>\n<td>（9，9.1，10）</td>\n<td>(160,164.4,170)</td>\n<td>(21,22.9,25)</td>\n</tr>\n<tr>\n<td>访问时长（-O2）</td>\n<td>（160，164.4，170）</td>\n<td>(5,5.8,7)</td>\n<td>(1,1.9,2)</td>\n</tr>\n<tr>\n<td>可加边</td>\n<td>可以</td>\n<td>可以</td>\n<td>不可以</td>\n</tr>\n</tbody></table>\n","feature":true,"text":"一些同步NFLSOJ的帖子 由于mzy没什么好的内容，，最近我会同步NFLSOJ的讨论板块。 不过，一些未标注原题的题解和过时信息会被跳过。 造福后人：树形背包...","permalink":"/post/一些同步NFLSOJ的帖子","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%80%E4%BA%9B%E5%90%8C%E6%AD%A5NFLSOJ%E7%9A%84%E5%B8%96%E5%AD%90\"><span class=\"toc-text\">一些同步NFLSOJ的帖子</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%80%A0%E7%A6%8F%E5%90%8E%E4%BA%BA%EF%BC%9A%E6%A0%91%E5%BD%A2%E8%83%8C%E5%8C%85-dp-%E7%9A%84%E9%94%99%E8%AF%AF%E5%86%99%E6%B3%95\"><span class=\"toc-text\">造福后人：树形背包 dp 的错误写法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8E%A8%E8%8D%90%E4%B8%80%E4%B8%AA%E5%81%9A%E9%A2%98%E7%9A%84%E5%A5%BD%E6%96%B9%E6%B3%95%E5%93%A6\"><span class=\"toc-text\">推荐一个做题的好方法哦</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AD%A6%E7%A4%BA%E5%90%8E%E4%BA%BA\"><span class=\"toc-text\">警示后人</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%E5%BC%8F%E5%89%8D%E5%90%91%E6%98%9F%EF%BC%88%E5%8C%BA%E9%97%B4%E5%BB%BA%E5%9B%BE%EF%BC%89%E2%80%94%E2%80%94%E5%85%B3%E4%BA%8E%E9%82%BB%E6%8E%A5%E8%A1%A8\"><span class=\"toc-text\">数组式前向星（区间建图）——关于邻接表</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E9%AB%98%E5%91%BC%EF%BC%9A-%E6%96%AF%E5%B7%B4%E5%85%8B%E7%91%9F%E6%96%87%E5%A4%A7%E5%B8%9D%E4%B8%87%E5%B2%81\"><span class=\"toc-text\">高呼： 斯巴克瑟文大帝万岁</span></a></li></ol>","author":{"name":"Aurora","slug":"blog-author","avatar":"","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{},"next_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"面向对象思想的概念与实现","date":"2024-07-25T00:41:13.547Z","updated":"2024-07-25T00:41:13.787Z","comments":true,"path":"api/articles/面向对象思想的概念与实现.json","keywords":null,"cover":null,"text":"面向对象思想的概念与实现 面向对象程序设计（英语：Object-oriented programming，缩写：OOP）是种具有对象概念的编程典范，同时也是一种...","permalink":"/post/面向对象思想的概念与实现","photos":[],"count_time":{"symbolsCount":624,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"Aurora","slug":"blog-author","avatar":"","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}